{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1542812734631},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1542812734631},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1542812734631},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1542812734631},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1542812734631},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1542812734639},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1542812728768},{"_id":"source/_posts/yeoman.md","hash":"073e519156c2f444dd9b2182c2e8b15cd3df44d3","modified":1542814129834},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1542812734631},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1542812734632},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1542812734632},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1542812734632},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1542812734632},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1542812734633},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1542812734633},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1542812734633},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1542812734633},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1542812734633},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1542812734633},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1542812734633},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1542812734638},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1542812734638},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1542812734638},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1542812734639},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1542812734639},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1542812734639},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1542812734639},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1542812734640},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1542812734634},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1542812734634},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1542812734634},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1542812734634},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1542812734634},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1542812734634},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1542812734635},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1542812734635},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1542812734635},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1542812734635},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1542812734637},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1542812734637},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1542812734637},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1542812734637},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1542812734637},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1542812734638},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1542812734640},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1542812734643},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1542812734652},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1542812734652},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1542812734652},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1542812734653},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1542812734653},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1542812734653},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1542812734653},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1542812734655},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1542812734656},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1542812734656},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1542812734657},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1542812734636},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1542812734636},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1542812734636},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1542812734636},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1542812734636},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1542812734636},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1542812734641},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1542812734641},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1542812734641},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1542812734642},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1542812734642},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1542812734641},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1542812734642},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1542812734642},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1542812734642},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1542812734643},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1542812734643},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1542812734643},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1542812734645},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1542812734644},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1542812734649},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1542812734654},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1542812734654},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1542812734654},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1542812734654},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1542812734655},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1542812734655},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1542812734648},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1542812734647},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1542812734651},{"_id":"public/2018/11/21/yeoman/index.html","hash":"cfdefaaf4dc08a4a382812833763a6f89b1a19ff","modified":1542898149456},{"_id":"public/2018/11/21/hello-world/index.html","hash":"355cfa54275824e5b0bb1f312cdeb291f83d6c82","modified":1542898149456},{"_id":"public/archives/index.html","hash":"899c5a37e95e3e7a4b9e71af5c4404f6b9465670","modified":1542898149472},{"_id":"public/archives/2018/index.html","hash":"da85b4d9ecd350c49b18fde8043bd0d3f9042485","modified":1542898149473},{"_id":"public/archives/2018/11/index.html","hash":"47a55a8285607ba4331bfa2f14c4698341ac990b","modified":1542898149473},{"_id":"public/index.html","hash":"890a8845fa9ef6dcc5ce67e9a3b808d1af77ab6d","modified":1542898149474},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1542814649066},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1542814649066},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1542814649066},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1542814649066},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1542814649066},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1542814649066},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1542814649067},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1542814649067},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1542814649067},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1542814649067},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1542814649605},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1542814649610},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1542814649613},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1542814649613},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1542814649613},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1542814649613},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1542814649613},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1542814649614},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1542814649614},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1542814649614},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1542814649614},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1542814649616},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1542814649616},{"_id":"source/_posts/lex&grid.markdown","hash":"c46f2587489a7444c30ff2a30dd5a17cd816f207","modified":1542897953235},{"_id":"public/archives/2018/07/index.html","hash":"e7a2d2ad23e0029b42d72c0dfa6ebaa2a442391f","modified":1542897792940},{"_id":"public/tags/css/index.html","hash":"148cda2cbf6adb576a3774305fa33df102b14fd4","modified":1542898149473},{"_id":"public/tags/前端开发/index.html","hash":"92cb53af391f764ef951610fe62a0eb65a4258a2","modified":1542897792940},{"_id":"public/tags/flex/index.html","hash":"2696f0f923ec4a4fcbe7720121d807c2f992a6fb","modified":1542898149473},{"_id":"public/tags/grid/index.html","hash":"cfd01b564b37b9a826bc5f2ca359229494222fda","modified":1542898149473},{"_id":"public/2018/07/12/lex&grid/index.html","hash":"0f82ff4851eea90289a31ebfbe64c99e23eda0be","modified":1542897792941},{"_id":"public/2018/11/22/lex&grid/index.html","hash":"d9e21e411131d1fa46e22cd8813022ae041957a2","modified":1542897957360},{"_id":"source/_posts/flex&grid.markdown","hash":"c46f2587489a7444c30ff2a30dd5a17cd816f207","modified":1542897953235},{"_id":"public/2018/11/22/flex&grid/index.html","hash":"f2eb58a68939cae177ffb16ddc41659fc2d19773","modified":1542898149475}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-11-21T15:05:28.768Z","updated":"2018-11-21T15:05:28.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjorc09rn0000z8jg7iukk7c9","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"yeoman","date":"2018-11-21T15:28:17.000Z","_content":"\n\n# 设置开发环境\n## 1.1 安装条件\n安装yeoman之前，你需要先安装如下内容\n\n* Nodejs v4 或者更高版本\n* npm\n* git\n\n通过以下命令检查是否安装 Node 环境以及 npm 管理工具。\n\n\t$ node -v && npm -v\n\nnpm 默认随 Node 一起安装。有些 Node 版本可能安装的是旧版本的 npm，你可以通过以下命令更新 npm\n\n\t$ npm install -g npm@latest\n\n通过以下命名检查是否安装git\n\n\t$ git --version\n\n## 1.2 安装yeoman工具箱\n如果已经安装了 node 环境，可以通过以下命令安装 Yeoman\n\n\t$ npm install -g yo\n\n##1.3 确认安装\n首先确认 Yeoman 是否正确安装\n\n\t$ yo --version\n\n# 安装Yeoman生成器\n在传统的 web开发中，你需要花大量时间为你的 webapp 设置模板代码、下载依赖包以及手动创建文件目录结构。Yeoman 的生成器会帮你搞定这一切\n\n2.1安装生成器\n你可以通过 npm 命令安装 Yeoman 生成器，目前可用的生成器超过了 3500 个，大多数都是开源社区贡献的。\n\n通过以下命令安装 generator-webpack-simple-static\n\n\t$ npm install -g generator-webpack-simple-static\n该命令将安装生成器所需的node包。\n\n和使用 npm install 一样，你可以通过 Yeoman 的交互菜单搜索 generators。\n\n运行 yo 然后选择 Install a generator 来搜索发布的生成器。\n\n# 使用生成器搭建app\n我们已经使用多次“脚手架”这个词，但是你可能还不知道它是什么意思。在 Yeoman的 语境中，脚手架材料表示通过一些配置为你的 webapp 生成文件。在这一步中，你会看到 Yeoman 如何为你喜欢的库及框架生成文件，以及使用如 webpack/babel/Sass 等一些额外的库的配置。\n\n3.1 创建项目文件夹\n\n\t$ mkdir mytodo && cd mytodo\n生成器生成的脚手架文件会放在这个文件夹中。\n\n3.2 通过 Yeoman 菜单使用生成器\n再次运行 yo\n\n\t$ yo\n如果你已经安装了多个 generator，你需要从中选择一个。选中 generator-webpack-simple-static，按回车 enter 运行生成器。\n","source":"_posts/yeoman.md","raw":"---\ntitle: yeoman\ndate: 2018-11-21 23:28:17\ntags:\n---\n\n\n# 设置开发环境\n## 1.1 安装条件\n安装yeoman之前，你需要先安装如下内容\n\n* Nodejs v4 或者更高版本\n* npm\n* git\n\n通过以下命令检查是否安装 Node 环境以及 npm 管理工具。\n\n\t$ node -v && npm -v\n\nnpm 默认随 Node 一起安装。有些 Node 版本可能安装的是旧版本的 npm，你可以通过以下命令更新 npm\n\n\t$ npm install -g npm@latest\n\n通过以下命名检查是否安装git\n\n\t$ git --version\n\n## 1.2 安装yeoman工具箱\n如果已经安装了 node 环境，可以通过以下命令安装 Yeoman\n\n\t$ npm install -g yo\n\n##1.3 确认安装\n首先确认 Yeoman 是否正确安装\n\n\t$ yo --version\n\n# 安装Yeoman生成器\n在传统的 web开发中，你需要花大量时间为你的 webapp 设置模板代码、下载依赖包以及手动创建文件目录结构。Yeoman 的生成器会帮你搞定这一切\n\n2.1安装生成器\n你可以通过 npm 命令安装 Yeoman 生成器，目前可用的生成器超过了 3500 个，大多数都是开源社区贡献的。\n\n通过以下命令安装 generator-webpack-simple-static\n\n\t$ npm install -g generator-webpack-simple-static\n该命令将安装生成器所需的node包。\n\n和使用 npm install 一样，你可以通过 Yeoman 的交互菜单搜索 generators。\n\n运行 yo 然后选择 Install a generator 来搜索发布的生成器。\n\n# 使用生成器搭建app\n我们已经使用多次“脚手架”这个词，但是你可能还不知道它是什么意思。在 Yeoman的 语境中，脚手架材料表示通过一些配置为你的 webapp 生成文件。在这一步中，你会看到 Yeoman 如何为你喜欢的库及框架生成文件，以及使用如 webpack/babel/Sass 等一些额外的库的配置。\n\n3.1 创建项目文件夹\n\n\t$ mkdir mytodo && cd mytodo\n生成器生成的脚手架文件会放在这个文件夹中。\n\n3.2 通过 Yeoman 菜单使用生成器\n再次运行 yo\n\n\t$ yo\n如果你已经安装了多个 generator，你需要从中选择一个。选中 generator-webpack-simple-static，按回车 enter 运行生成器。\n","slug":"yeoman","published":1,"updated":"2018-11-21T15:28:49.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjorc09rs0001z8jgho2whtqj","content":"<h1 id=\"设置开发环境\"><a href=\"#设置开发环境\" class=\"headerlink\" title=\"设置开发环境\"></a>设置开发环境</h1><h2 id=\"1-1-安装条件\"><a href=\"#1-1-安装条件\" class=\"headerlink\" title=\"1.1 安装条件\"></a>1.1 安装条件</h2><p>安装yeoman之前，你需要先安装如下内容</p>\n<ul>\n<li>Nodejs v4 或者更高版本</li>\n<li>npm</li>\n<li>git</li>\n</ul>\n<p>通过以下命令检查是否安装 Node 环境以及 npm 管理工具。</p>\n<pre><code>$ node -v &amp;&amp; npm -v\n</code></pre><p>npm 默认随 Node 一起安装。有些 Node 版本可能安装的是旧版本的 npm，你可以通过以下命令更新 npm</p>\n<pre><code>$ npm install -g npm@latest\n</code></pre><p>通过以下命名检查是否安装git</p>\n<pre><code>$ git --version\n</code></pre><h2 id=\"1-2-安装yeoman工具箱\"><a href=\"#1-2-安装yeoman工具箱\" class=\"headerlink\" title=\"1.2 安装yeoman工具箱\"></a>1.2 安装yeoman工具箱</h2><p>如果已经安装了 node 环境，可以通过以下命令安装 Yeoman</p>\n<pre><code>$ npm install -g yo\n</code></pre><p>##1.3 确认安装<br>首先确认 Yeoman 是否正确安装</p>\n<pre><code>$ yo --version\n</code></pre><h1 id=\"安装Yeoman生成器\"><a href=\"#安装Yeoman生成器\" class=\"headerlink\" title=\"安装Yeoman生成器\"></a>安装Yeoman生成器</h1><p>在传统的 web开发中，你需要花大量时间为你的 webapp 设置模板代码、下载依赖包以及手动创建文件目录结构。Yeoman 的生成器会帮你搞定这一切</p>\n<p>2.1安装生成器<br>你可以通过 npm 命令安装 Yeoman 生成器，目前可用的生成器超过了 3500 个，大多数都是开源社区贡献的。</p>\n<p>通过以下命令安装 generator-webpack-simple-static</p>\n<pre><code>$ npm install -g generator-webpack-simple-static\n</code></pre><p>该命令将安装生成器所需的node包。</p>\n<p>和使用 npm install 一样，你可以通过 Yeoman 的交互菜单搜索 generators。</p>\n<p>运行 yo 然后选择 Install a generator 来搜索发布的生成器。</p>\n<h1 id=\"使用生成器搭建app\"><a href=\"#使用生成器搭建app\" class=\"headerlink\" title=\"使用生成器搭建app\"></a>使用生成器搭建app</h1><p>我们已经使用多次“脚手架”这个词，但是你可能还不知道它是什么意思。在 Yeoman的 语境中，脚手架材料表示通过一些配置为你的 webapp 生成文件。在这一步中，你会看到 Yeoman 如何为你喜欢的库及框架生成文件，以及使用如 webpack/babel/Sass 等一些额外的库的配置。</p>\n<p>3.1 创建项目文件夹</p>\n<pre><code>$ mkdir mytodo &amp;&amp; cd mytodo\n</code></pre><p>生成器生成的脚手架文件会放在这个文件夹中。</p>\n<p>3.2 通过 Yeoman 菜单使用生成器<br>再次运行 yo</p>\n<pre><code>$ yo\n</code></pre><p>如果你已经安装了多个 generator，你需要从中选择一个。选中 generator-webpack-simple-static，按回车 enter 运行生成器。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"设置开发环境\"><a href=\"#设置开发环境\" class=\"headerlink\" title=\"设置开发环境\"></a>设置开发环境</h1><h2 id=\"1-1-安装条件\"><a href=\"#1-1-安装条件\" class=\"headerlink\" title=\"1.1 安装条件\"></a>1.1 安装条件</h2><p>安装yeoman之前，你需要先安装如下内容</p>\n<ul>\n<li>Nodejs v4 或者更高版本</li>\n<li>npm</li>\n<li>git</li>\n</ul>\n<p>通过以下命令检查是否安装 Node 环境以及 npm 管理工具。</p>\n<pre><code>$ node -v &amp;&amp; npm -v\n</code></pre><p>npm 默认随 Node 一起安装。有些 Node 版本可能安装的是旧版本的 npm，你可以通过以下命令更新 npm</p>\n<pre><code>$ npm install -g npm@latest\n</code></pre><p>通过以下命名检查是否安装git</p>\n<pre><code>$ git --version\n</code></pre><h2 id=\"1-2-安装yeoman工具箱\"><a href=\"#1-2-安装yeoman工具箱\" class=\"headerlink\" title=\"1.2 安装yeoman工具箱\"></a>1.2 安装yeoman工具箱</h2><p>如果已经安装了 node 环境，可以通过以下命令安装 Yeoman</p>\n<pre><code>$ npm install -g yo\n</code></pre><p>##1.3 确认安装<br>首先确认 Yeoman 是否正确安装</p>\n<pre><code>$ yo --version\n</code></pre><h1 id=\"安装Yeoman生成器\"><a href=\"#安装Yeoman生成器\" class=\"headerlink\" title=\"安装Yeoman生成器\"></a>安装Yeoman生成器</h1><p>在传统的 web开发中，你需要花大量时间为你的 webapp 设置模板代码、下载依赖包以及手动创建文件目录结构。Yeoman 的生成器会帮你搞定这一切</p>\n<p>2.1安装生成器<br>你可以通过 npm 命令安装 Yeoman 生成器，目前可用的生成器超过了 3500 个，大多数都是开源社区贡献的。</p>\n<p>通过以下命令安装 generator-webpack-simple-static</p>\n<pre><code>$ npm install -g generator-webpack-simple-static\n</code></pre><p>该命令将安装生成器所需的node包。</p>\n<p>和使用 npm install 一样，你可以通过 Yeoman 的交互菜单搜索 generators。</p>\n<p>运行 yo 然后选择 Install a generator 来搜索发布的生成器。</p>\n<h1 id=\"使用生成器搭建app\"><a href=\"#使用生成器搭建app\" class=\"headerlink\" title=\"使用生成器搭建app\"></a>使用生成器搭建app</h1><p>我们已经使用多次“脚手架”这个词，但是你可能还不知道它是什么意思。在 Yeoman的 语境中，脚手架材料表示通过一些配置为你的 webapp 生成文件。在这一步中，你会看到 Yeoman 如何为你喜欢的库及框架生成文件，以及使用如 webpack/babel/Sass 等一些额外的库的配置。</p>\n<p>3.1 创建项目文件夹</p>\n<pre><code>$ mkdir mytodo &amp;&amp; cd mytodo\n</code></pre><p>生成器生成的脚手架文件会放在这个文件夹中。</p>\n<p>3.2 通过 Yeoman 菜单使用生成器<br>再次运行 yo</p>\n<pre><code>$ yo\n</code></pre><p>如果你已经安装了多个 generator，你需要从中选择一个。选中 generator-webpack-simple-static，按回车 enter 运行生成器。</p>\n"},{"title":"flex & grid 布局","_content":"\n\n# Flex\n## 背景\n布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。\n## flex布局\n* **容器的声明**  \n Flex是Flexible Box的缩写，意为\"弹性布局\"  \n 任何容器，我们均可以将它指定为flex布局，行内元素也可以使用Flex布局，Webkit内核的浏览器，必须加上-webkit前缀  \n 设为Flex布局以后，子元素的float、clear和vertical-align属性将失效\n  \n  \n\t\t      .box{\n\t\t        display:flex;\n\t\t        }\n\t\t     \n\t\t     \n\t\t\t  .box{  \n\t\t\t  display:inline-flex;\n\t\t\t  }\n\t\t\t  \n\t\t\t  .box{\n\t\t\t  display:-webkit-flex;\n\t\t\t  display:flex;\n\t\t    }\n\t\t        \n          \n## 概念\n ![](http://oczira72b.bkt.clouddn.com/grid-flex-2.png)  \n 采用flex布局的元素，称为flex容器（flex container）。它的所有子元素自动成为容器成员，称为flex项目（flex item）  \n 容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。 项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size\n \n## 容器的属性\n1. **flex-direction**  \n   该属性决定主轴的方向\n \n \t\t\t.box {\n  \t\tflex-direction: row | row-reverse | column | column-reverse;\n\t\t}\n ![](http://oczira72b.bkt.clouddn.com/grid-flex-5.jpg)\n \n2. **flex-wrap**  \n   如果一条轴线排不下，如何换行  \n   \n\t     .box{\n\t\t\t  flex-wrap: nowrap | wrap | wrap-reverse;\n\t\t\t}\n\t\t\n\tnowrap为默认值，代表不换行。  \n\twrap代表换行，但默认为第一行在上方。  \n\twrap-reverse代表换行，但默认为第一行在下方。\t \n3. **flex-flow**  \n flex-flow属性是**flex-direction**属性和**flex-wrap**属性的简写形式，默认值为**row nowrap**\n \n \n\t\t .box {\n\t\t  flex-flow: <flex-direction> || <flex-wrap>;\n\t\t}\n\t\t\n4. **justify-content**  \n   justify-content属性定义了项目在主轴上的对齐方式。\n   \n   \t\t\t\t.box {\n\t\t\t\t  justify-content: flex-start | flex-end | center | space-between | space-around;\n\t\t\t\t}\nflex-start为默认值，代表项目在主轴上向起始方向对齐  \nflex-end代表项目在主轴上向结束方向对齐  \ncenter代表项目在主轴上居中对齐  \nspace-between代表项目在主轴上两端对齐，但第一个项目在主轴的起始位置，最后一个项目在主轴的结束位置  \nspace-around代表项目在主轴上等分间距，但第一个项目与最后一个项目距离主轴的两端保持一定的距离，这个距离为项目之间间距的1/2  \n![](http://oczira72b.bkt.clouddn.com/grid-flex-7.jpg)\n\n5. **align-items**  \n  align-items属性定义项目在交叉轴上如何对齐。\n\n\t\t\t.box {\n\t\t\t  align-items: flex-start | flex-end | center | baseline | stretch;\n\t\t\t}\n![](http://oczira72b.bkt.clouddn.com/grid-flex-8.jpg)  \nflex-start代表项目在交叉轴上向起始方向对齐。  \nflex-end代表项目在交叉轴上向结束方向对齐。  \ncenter代表项目在交叉轴上居中对齐。  \nbaseline代表项目在交叉轴上向项目的第一行文字的基线对齐。  \nstretch代表项目在交叉轴上拉伸对齐。 \n \n6. **align-content**  \n  align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n\n\t\t.box {\n\t\t  align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n\t\t}\nflex-start：与交叉轴的起点对齐。  \nflex-end：与交叉轴的终点对齐。  \ncenter：与交叉轴的中点对齐。  \nspace-between：与交叉轴两端对齐，轴线之间的间隔平均分布。  \nspace-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。  \nstretch（默认值）：轴线占满整个交叉轴。  \n![](http://oczira72b.bkt.clouddn.com/grid-flex-9.jpg)  \n\n## 项目的属性\n1. **order**  \n  order属性定义项目的排列顺序，数值越小，排列越靠前，默认为0  \n  \n\t\t\t\t  .item {\n\t\t\t\t  order: <integer>;\n\t\t\t\t}\n\t![](http://oczira72b.bkt.clouddn.com/grid-flex-10.jpg) \n\t\n2.**flex-grow**  \n  flex-grow定义了项目的放大比例。如果所有伸缩项目的flex-grow设置了1，那么每个伸缩项目将设置为一个大小相等的剩余空间。如果你给其中一个伸缩项目设置了flex-grow值为2，那么这个伸缩项目所占的剩余空间是其他伸缩项目所占剩余空间的两倍。\n\nps：负值对该属性无效。  \n\n\t\t\t\t.item {\n\t\t\t\t    flex-grow: <number>; /* default 0 */\n\t\t\t\t}\n ![](http://oczira72b.bkt.clouddn.com/grid-flex-11.jpg)\n \n 3. **flex-shrink**  \n 类似于flex-grow，flex-shrink定义了项目的缩小比例。其默认值为1  \n\n如果所有项目的flex-shrink都为1，当空间不足时，都将等比例缩小  \n\n如果所有项目都为1，但其中一个项目的flex-shrink为0，即代表空间不足时，该项目缩小0倍，即为不缩小  \n\nps：负值对该属性不起作用。\n ![](http://oczira72b.bkt.clouddn.com/grid-flex-12.jpg)\n \n4. **flex-basis**  \n  flex-basis定义了在分配多余空间之前，项目占据的主轴空间。览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。\n  \n\t\t  .item {\n\t\t    flex-basis: <length> | auto; /* default auto */\n\t\t}\n\t\t\n利用flex-basis，我们可以很容易实现页面布局中的常见问题：两栏/三栏布局\n\n\t\t\t<div class=\"box\">\n\t\t    <div class=\"left\">left</div>\n\t\t    <div class=\"main\">main</div>\n\t\t</div>\n\t\t\n\t\t\n\t\t\t\t.box {\n\t\t    display: flex;\n\t\t    height: 200px;\n\t\t\t\t}\n\t\t\t\t.left {\n\t\t\t\t    background-color: yellow;\n\t\t\t\t    flex-basis: 200px;\n\t\t\t/* flex-basis定义该项目在分配主轴空间之前提前获得200px的空间 */\n\t\t\t\t    flex-grow: 0;\n\t\t\t\t    /* flex-grow定义该项目不分配剩余空间 */\n\t\t\t\t}\n\t\t\t\t.main {\n\t\t\t\t    background-color: green;\n\t\t\t\t    flex-grow: 1;\n\t\t\t\t    /* flex-grow定义main占满剩余空间 */\n\t\t\t\t}\n\t\t\t\t\n![](http://oczira72b.bkt.clouddn.com/grid-flex-13.jpg)\n\n5.**flex** \nflex是flex-grow、flex-shrink和flex-basis的简写，默认值为0 1 auto。后两个属性可选。\n\n\t\t\t.item {\n\t\t\t    flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n\t\t\t}\n6. **align-self**  \n   align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。    \n    \n \n# Grid  \n## 概念\ngrid 布局。是一个基于网格的二维布局系统。grid是第一个专门为了解决那些我们一直使用 hack 手段而导致的页面布局问题而创建的CSS模块。  \n一个grid容器的内容：  \n\n* 可以将应用程序分割成不同的空间  \n* 可以定义子项的大小、位置以及层级。\n* 与表格类似的是：可以让Web设计师根据元素按列或行对齐排列。\n* 可以定位自己的位置，这样他们可以重叠和类似元素定位。\n* 可以通过结合CSS的媒体查询属性，根据不同的设备和可用空间调整元素的显示风格与定位，而不需要去改变文档结构的本质内容  \n\n**浏览器支持**\n![](http://oczira72b.bkt.clouddn.com/grid-flex-25.jpg)\n\n采用grid布局的元素，称为grid容器（grid container）。它的所有子元素自动成为容器成员，称为grid项目（grid item）。\n\n分隔的线组成了网格的结构。它们可以是垂直的（“列网格线”）或者水平的（“行网格线”），也可以在行或列的任一边。下面的例子中黄色的线是一个列网格线的例子。  \n**网格线**  \n每条网格线具有默认的编号，从左到右和从上到下分别为1,2,3......\n![](http://oczira72b.bkt.clouddn.com/grid-flex-3.jpg)\n**网格单元**  \n网格单元是指两根毗邻的行网格线和列网格线中间的位置，它是一个单独的网格“单元”，如图所示，网格单元是指第 1 和 2 根行网格线和第 2 和 3 根列网格线中间的位置。    \n![](http://oczira72b.bkt.clouddn.com/flex-grid-4.png)  \n**网格轨迹**    \n网格轨迹是指两根毗邻线中间的位置，可以认为是网格的行或者列  \n![](http://oczira72b.bkt.clouddn.com/grid-flex-26.png)  \n**网格区域**  \n网格区域是指 4 根网格线包围的空间，一个网格空间可能由任意数量的网格单元构成  \n![](http://oczira72b.bkt.clouddn.com/grid-flex-27.png)  \n\n\n## 容器的属性\n\n1. **disaplay**\ndisplay属性定义了一个网格容器，容器是展现为行内或块状由所给定的值而决定，此时，他的所有子元素进入grid文档流，称为grid项目 \n\n\t\t\t\t.box {\n\t\t\t\t    display: grid | inline-grid | subgrid;\n\t\t\t\t}\ngrid定义了一个网格容器，它以块级元素的形式显示  \ninline-grid定义了一个网格容器，它以内联元素的形式显示  \nsubgrid定义了一个网格容器，这个网格容器是其父级网格容器的一个子项。它的行和列的大小从父级网格容器中获取  \n\n2. **grid-template-columns | grid-template-rows**  \ngrid-template-rows和grid-template-columns定义了一个网格的列数、行数以及网格的大小。\n\n\t\t\t.box {\n\t\t\t\t    grid-template-columns: <track-size> ... | <line-name> <track-size> ...;\n\t\t\t\t    grid-template-rows: <track-size> ... | <line-name> <track-size> ...;\n\t\t\t\t}\n定义网格单元的宽高，其单位可以是一个长度(如px、em、rem、vw、vh)或百分比，也可以是网格中自由空间的份数(单位为fr)  \n定义网格线的名称，它不是必须值。可以一个你选择的任意名字，当没有显示设定时，它的名字以数字表示。  \n\n\t\t\t.box {\n\t\t\t    grid-template-columns: 40px 50px auto 50px 40px;\n\t\t\t    grid-template-rows: 25% 100px auto;\n\t\t\t}\n![](http://oczira72b.bkt.clouddn.com/grid-flex-28.png)\n\n\t\t.box {\n\t\t    grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];\n\t\t    grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];\n\t\t}\n![](http://oczira72b.bkt.clouddn.com/grid-flex-29.png)\n\n一根网格线可以有多个名字，例如在下面的例子中第二根线有两个名字：row1-end 和 row2-start，命名方式以空格来作为间隔。\n\n     .box{\n         grid-template-rows:[row1-start] 25% [row1-end row-start] 25% [row-end];\n         }\n         \n定义了容器的重复部分，你可以使用CSS的repeat()方法来生成多个相同值：\n\t\t\n\t\t.box {\n\t\t    grid-template-columns: repeat(3, 20px [col-start]) 5%;\n\t\t}\n\t\t\t\t\n\t\t.box {\n\t\t    grid-template-columns: 20px [col-start] 20px [col-start] 20px [col-start] 5%;\n\t\t}\n\t\t\nfr是一个特殊的单位，它可以类似于设定flex-grow时，给网格容器中的自由空间设置为一个份数，举个例子，下面的例子将把网格容器的每个子项设置为三分之一\n\n\t\t.box {\n    \t\tgrid-template-columns: 1fr 1fr 1fr;\n\t\t}\n\t\t\n也是类似于flex-grow，自由空间是在固定子项确定后开始计算的（这里就如同flex-basis提前给予宽高那样），在下面的例子中自由空间是fr单位的总和但不包括50px：\n\t\t\t.box {\n\t\t\t    grid-template-columns: 1fr 50px 1fr 1fr;\n\t\t\t}\n\t\t\t\n3. **grid-template-areas**  \n   grid-template-areas可以配合gird-area定义一个显示的网格区域。  \n   grid-template-areas定义网格区域，然后使用grid-area调用声明好的网格区域名称来放置对应的网格项目  \n   \n         <section class=\"grid\">\n\t\t    <div class=\"title\">title</div>\n\t\t    <div class=\"nav\">nav</div>\n\t\t    <div class=\"main\">main</div>\n\t\t    <div class=\"aside\">aside</div>\n\t\t    <div class=\"footer\">footer</div>\n\t\t</section>  \n\t\t.grid {\n\t\t\t    display: grid;\n\t\t\t    grid-template-columns: 100px 100px 100px 100px 100px;\n\t\t\t    grid-template-rows: 100px 100px 100px 100px;\n\t\t\t    grid-template-areas: 'title title title title aside'\n\t\t\t                          'nav main main main aside'\n\t\t\t                          'nav main main main aside'\n\t\t\t                          'footer footer footer footer footer';\n\t\t\t    font-size: 30px;\n\t\t\t    text-align: center;\n\t\t\t}\n\t\t\t.title {\n\t\t\t    grid-area: title;\n\t\t\t    background-color: blue;\n\t\t\t}\n\t\t\t.nav {\n\t\t\t    grid-area: nav;\n\t\t\t    background-color: yellow;\n\t\t\t}\n\t\t\t.main {\n\t\t\t    grid-area: main;\n\t\t\t    background-color: gray;\n\t\t\t}\n\t\t\t.aside {\n\t\t\t    grid-area: aside;\n\t\t\t    background-color: green;\n\t\t\t}\n\t\t\t.footer {\n\t\t\t    grid-area: footer;\n\t\t\t    background-color: pink;\n\t\t\t}\n![](http://oczira72b.bkt.clouddn.com/grid-flex-30.jpg)   \n\n4. **grid-column-gap|grid-row-gap**  \n   grid-column-gap和grid-row-gap定义了网格之间的间距\n   \n\t\t   .box {\n\t\t    grid-template-columns: 100px 50px 100px;\n\t\t    grid-template-rows: 80px auto 80px;\n\t\t    grid-column-gap: 10px;\n\t\t    grid-row-gap: 15px;\n\t\t}\n![](http://oczira72b.bkt.clouddn.com/grid-flex-31.png) \n\n5.**justify-items**  \njustify-items定义了网格子项的内容和列轴对齐方式，即水平方向上的对齐方式  \n\n\t\t\t.box {\n\t\t\t    justify-items: start | end | center | stretch;\n\t\t\t}\nstart代表内容和网格区域的左边对齐  \nend代表内容和网格区域的右边对齐  \ncenter代表内容和网格区域的中间对齐  \nstretch为默认值，代表填充整个网格区域的宽度  \n\n6. **align-items**  \n  类似于justify-items，align-items定义了网格子项的内容和行轴对齐方式，即垂直方向上的对齐方式。\n  \n\t\t\t .box {\n\t\t\t    align-items: start | end | center | stretch;\n\t\t\t}\n\t\t\t  \nstart代表内容和网格区域的上边对齐  \nend代表内容和网格区域的下边对齐  \ncenter代表内容和网格区域的中间对齐  \nstretch为默认值，代表填充整个网格区域的高度  \n\n7. **justity-content|align-content**\n  justify-content属性定义了网格和网格容器列轴对齐方式  \n  \n  \t\t\t.box {\n\t\t\t    justify-content|align-content: start | end | center | stretch | space-around | space-between | space-evenly;\n\t\t\t}\nstart代表网格在网格容器(左|上）边对齐  \nend代表网格在网格容器(右|下)边对齐  \ncenter代表网格在网格容器中间对齐  \nstretch改变网格子项的容量让其填充整个网格容器宽度  \nspace-around代表在每个网格子项中间放置均等的空间，在始末两端只有一半大小  \nspace-between代表在每个网格子项中间放置均等的空间，在始末两端没有空间  \nspace-evenly代表在每个网格子项中间放置均等的空间，包括始末两端  \n\n8. **grid-auto-columns|grid-auto-rows**  \n   grid-auto-columns与grid-auto-rows可以指定隐式网格。\n   \t\t\n   \t\t<div class=\"grid\">\n\t\t    <div class=\"box1\">box1</div>\n\t\t    <div class=\"box2\">box2</div>\n\t\t    <div class=\"box3\">box3</div>\n\t\t    <div class=\"box4\">box4</div>\n\t\t</div>\n  \t\t\t.grid {\n\t\t\t    display: grid;\n\t\t\t    grid-template-columns: 200px;\n\t\t\t    grid-template-rows: 200px;\n\t\t\t    text-align: center;\n\t\t\t    font-size: 30px;\n\t\t\t}\n\t\t\t.box1 {\n\t\t\t    background-color: pink;\n\t\t\t    grid-column: 1;\n\t\t\t    grid-row: 1;\n\t\t\t}\n\t\t\t.box2 {\n\t\t\t    background-color: yellow;\n\t\t\t    grid-column: 2;\n\t\t\t    grid-row: 1;\n\t\t\t}\n\t\t\t.box3 {\n\t\t\t    background-color: gray;\n\t\t\t    grid-column: 1;\n\t\t\t    grid-column: 2;\n\t\t\t}\n\t\t\t.box4 {\n\t\t\t    background-color: blue;\n\t\t\t    grid-column: 2;\n\t\t\t    grid-row: 2;\n\t\t\t}\n\n![](http://oczira72b.bkt.clouddn.com/grid-flex-54.jpg)  \n通过grid-auto-columns与grid-auto-rows属性，创建一个隐式的2×2的网格  \n\n\t\t\t\tgrid-auto-columns: 300px;\n\t\t\t\tgrid-auto-rows: 300px;\n![](http://oczira72b.bkt.clouddn.com/grid-flex-55.jpg)  \n9. **grid-auto-flow**    \n   grid布局自身具有的自动布局算法会将网格子项自动放置起来，而grid-auto-flow属性控制自动布局算法如何工作\n \n\t   .box {\n\t    grid-auto-flow: row | column | row dense | column dense\n\t}\n\t\nrow为默认值，代表自动布局算法在每一行中依次填充，只有必要时才会添加新行。  \ncolumn代表自动布局算法在每一列中依次填充，只有必要时才会添加新行。  \ndense代表告诉自动布局算法如果更小的子项出现时尝试在网格中填补漏洞。  \n10 **grid**  \ngrid为以下属性的合并写法：grid-template-rows，grid-template-columns，grid-template-areas，grid-auto-rows，grid-auto-columns，grid-auto-flow。它也可以设置grid-column-gap和grid-row-gap。  \n\n\t.box {\n\t    grid: none | <grid-template-rows> / <grid-template-columns> | <grid-auto-flow> [<grid-auto-rows> [/ <grid-auto-columns>]];\n\t}\n","source":"_posts/flex&grid.markdown","raw":"---\ntitle:      \"flex & grid 布局\"\ntags:\n    - css\n    - flex\n    - grid\n---\n\n\n# Flex\n## 背景\n布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。\n## flex布局\n* **容器的声明**  \n Flex是Flexible Box的缩写，意为\"弹性布局\"  \n 任何容器，我们均可以将它指定为flex布局，行内元素也可以使用Flex布局，Webkit内核的浏览器，必须加上-webkit前缀  \n 设为Flex布局以后，子元素的float、clear和vertical-align属性将失效\n  \n  \n\t\t      .box{\n\t\t        display:flex;\n\t\t        }\n\t\t     \n\t\t     \n\t\t\t  .box{  \n\t\t\t  display:inline-flex;\n\t\t\t  }\n\t\t\t  \n\t\t\t  .box{\n\t\t\t  display:-webkit-flex;\n\t\t\t  display:flex;\n\t\t    }\n\t\t        \n          \n## 概念\n ![](http://oczira72b.bkt.clouddn.com/grid-flex-2.png)  \n 采用flex布局的元素，称为flex容器（flex container）。它的所有子元素自动成为容器成员，称为flex项目（flex item）  \n 容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。 项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size\n \n## 容器的属性\n1. **flex-direction**  \n   该属性决定主轴的方向\n \n \t\t\t.box {\n  \t\tflex-direction: row | row-reverse | column | column-reverse;\n\t\t}\n ![](http://oczira72b.bkt.clouddn.com/grid-flex-5.jpg)\n \n2. **flex-wrap**  \n   如果一条轴线排不下，如何换行  \n   \n\t     .box{\n\t\t\t  flex-wrap: nowrap | wrap | wrap-reverse;\n\t\t\t}\n\t\t\n\tnowrap为默认值，代表不换行。  \n\twrap代表换行，但默认为第一行在上方。  \n\twrap-reverse代表换行，但默认为第一行在下方。\t \n3. **flex-flow**  \n flex-flow属性是**flex-direction**属性和**flex-wrap**属性的简写形式，默认值为**row nowrap**\n \n \n\t\t .box {\n\t\t  flex-flow: <flex-direction> || <flex-wrap>;\n\t\t}\n\t\t\n4. **justify-content**  \n   justify-content属性定义了项目在主轴上的对齐方式。\n   \n   \t\t\t\t.box {\n\t\t\t\t  justify-content: flex-start | flex-end | center | space-between | space-around;\n\t\t\t\t}\nflex-start为默认值，代表项目在主轴上向起始方向对齐  \nflex-end代表项目在主轴上向结束方向对齐  \ncenter代表项目在主轴上居中对齐  \nspace-between代表项目在主轴上两端对齐，但第一个项目在主轴的起始位置，最后一个项目在主轴的结束位置  \nspace-around代表项目在主轴上等分间距，但第一个项目与最后一个项目距离主轴的两端保持一定的距离，这个距离为项目之间间距的1/2  \n![](http://oczira72b.bkt.clouddn.com/grid-flex-7.jpg)\n\n5. **align-items**  \n  align-items属性定义项目在交叉轴上如何对齐。\n\n\t\t\t.box {\n\t\t\t  align-items: flex-start | flex-end | center | baseline | stretch;\n\t\t\t}\n![](http://oczira72b.bkt.clouddn.com/grid-flex-8.jpg)  \nflex-start代表项目在交叉轴上向起始方向对齐。  \nflex-end代表项目在交叉轴上向结束方向对齐。  \ncenter代表项目在交叉轴上居中对齐。  \nbaseline代表项目在交叉轴上向项目的第一行文字的基线对齐。  \nstretch代表项目在交叉轴上拉伸对齐。 \n \n6. **align-content**  \n  align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n\n\t\t.box {\n\t\t  align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n\t\t}\nflex-start：与交叉轴的起点对齐。  \nflex-end：与交叉轴的终点对齐。  \ncenter：与交叉轴的中点对齐。  \nspace-between：与交叉轴两端对齐，轴线之间的间隔平均分布。  \nspace-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。  \nstretch（默认值）：轴线占满整个交叉轴。  \n![](http://oczira72b.bkt.clouddn.com/grid-flex-9.jpg)  \n\n## 项目的属性\n1. **order**  \n  order属性定义项目的排列顺序，数值越小，排列越靠前，默认为0  \n  \n\t\t\t\t  .item {\n\t\t\t\t  order: <integer>;\n\t\t\t\t}\n\t![](http://oczira72b.bkt.clouddn.com/grid-flex-10.jpg) \n\t\n2.**flex-grow**  \n  flex-grow定义了项目的放大比例。如果所有伸缩项目的flex-grow设置了1，那么每个伸缩项目将设置为一个大小相等的剩余空间。如果你给其中一个伸缩项目设置了flex-grow值为2，那么这个伸缩项目所占的剩余空间是其他伸缩项目所占剩余空间的两倍。\n\nps：负值对该属性无效。  \n\n\t\t\t\t.item {\n\t\t\t\t    flex-grow: <number>; /* default 0 */\n\t\t\t\t}\n ![](http://oczira72b.bkt.clouddn.com/grid-flex-11.jpg)\n \n 3. **flex-shrink**  \n 类似于flex-grow，flex-shrink定义了项目的缩小比例。其默认值为1  \n\n如果所有项目的flex-shrink都为1，当空间不足时，都将等比例缩小  \n\n如果所有项目都为1，但其中一个项目的flex-shrink为0，即代表空间不足时，该项目缩小0倍，即为不缩小  \n\nps：负值对该属性不起作用。\n ![](http://oczira72b.bkt.clouddn.com/grid-flex-12.jpg)\n \n4. **flex-basis**  \n  flex-basis定义了在分配多余空间之前，项目占据的主轴空间。览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。\n  \n\t\t  .item {\n\t\t    flex-basis: <length> | auto; /* default auto */\n\t\t}\n\t\t\n利用flex-basis，我们可以很容易实现页面布局中的常见问题：两栏/三栏布局\n\n\t\t\t<div class=\"box\">\n\t\t    <div class=\"left\">left</div>\n\t\t    <div class=\"main\">main</div>\n\t\t</div>\n\t\t\n\t\t\n\t\t\t\t.box {\n\t\t    display: flex;\n\t\t    height: 200px;\n\t\t\t\t}\n\t\t\t\t.left {\n\t\t\t\t    background-color: yellow;\n\t\t\t\t    flex-basis: 200px;\n\t\t\t/* flex-basis定义该项目在分配主轴空间之前提前获得200px的空间 */\n\t\t\t\t    flex-grow: 0;\n\t\t\t\t    /* flex-grow定义该项目不分配剩余空间 */\n\t\t\t\t}\n\t\t\t\t.main {\n\t\t\t\t    background-color: green;\n\t\t\t\t    flex-grow: 1;\n\t\t\t\t    /* flex-grow定义main占满剩余空间 */\n\t\t\t\t}\n\t\t\t\t\n![](http://oczira72b.bkt.clouddn.com/grid-flex-13.jpg)\n\n5.**flex** \nflex是flex-grow、flex-shrink和flex-basis的简写，默认值为0 1 auto。后两个属性可选。\n\n\t\t\t.item {\n\t\t\t    flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n\t\t\t}\n6. **align-self**  \n   align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。    \n    \n \n# Grid  \n## 概念\ngrid 布局。是一个基于网格的二维布局系统。grid是第一个专门为了解决那些我们一直使用 hack 手段而导致的页面布局问题而创建的CSS模块。  \n一个grid容器的内容：  \n\n* 可以将应用程序分割成不同的空间  \n* 可以定义子项的大小、位置以及层级。\n* 与表格类似的是：可以让Web设计师根据元素按列或行对齐排列。\n* 可以定位自己的位置，这样他们可以重叠和类似元素定位。\n* 可以通过结合CSS的媒体查询属性，根据不同的设备和可用空间调整元素的显示风格与定位，而不需要去改变文档结构的本质内容  \n\n**浏览器支持**\n![](http://oczira72b.bkt.clouddn.com/grid-flex-25.jpg)\n\n采用grid布局的元素，称为grid容器（grid container）。它的所有子元素自动成为容器成员，称为grid项目（grid item）。\n\n分隔的线组成了网格的结构。它们可以是垂直的（“列网格线”）或者水平的（“行网格线”），也可以在行或列的任一边。下面的例子中黄色的线是一个列网格线的例子。  \n**网格线**  \n每条网格线具有默认的编号，从左到右和从上到下分别为1,2,3......\n![](http://oczira72b.bkt.clouddn.com/grid-flex-3.jpg)\n**网格单元**  \n网格单元是指两根毗邻的行网格线和列网格线中间的位置，它是一个单独的网格“单元”，如图所示，网格单元是指第 1 和 2 根行网格线和第 2 和 3 根列网格线中间的位置。    \n![](http://oczira72b.bkt.clouddn.com/flex-grid-4.png)  \n**网格轨迹**    \n网格轨迹是指两根毗邻线中间的位置，可以认为是网格的行或者列  \n![](http://oczira72b.bkt.clouddn.com/grid-flex-26.png)  \n**网格区域**  \n网格区域是指 4 根网格线包围的空间，一个网格空间可能由任意数量的网格单元构成  \n![](http://oczira72b.bkt.clouddn.com/grid-flex-27.png)  \n\n\n## 容器的属性\n\n1. **disaplay**\ndisplay属性定义了一个网格容器，容器是展现为行内或块状由所给定的值而决定，此时，他的所有子元素进入grid文档流，称为grid项目 \n\n\t\t\t\t.box {\n\t\t\t\t    display: grid | inline-grid | subgrid;\n\t\t\t\t}\ngrid定义了一个网格容器，它以块级元素的形式显示  \ninline-grid定义了一个网格容器，它以内联元素的形式显示  \nsubgrid定义了一个网格容器，这个网格容器是其父级网格容器的一个子项。它的行和列的大小从父级网格容器中获取  \n\n2. **grid-template-columns | grid-template-rows**  \ngrid-template-rows和grid-template-columns定义了一个网格的列数、行数以及网格的大小。\n\n\t\t\t.box {\n\t\t\t\t    grid-template-columns: <track-size> ... | <line-name> <track-size> ...;\n\t\t\t\t    grid-template-rows: <track-size> ... | <line-name> <track-size> ...;\n\t\t\t\t}\n定义网格单元的宽高，其单位可以是一个长度(如px、em、rem、vw、vh)或百分比，也可以是网格中自由空间的份数(单位为fr)  \n定义网格线的名称，它不是必须值。可以一个你选择的任意名字，当没有显示设定时，它的名字以数字表示。  \n\n\t\t\t.box {\n\t\t\t    grid-template-columns: 40px 50px auto 50px 40px;\n\t\t\t    grid-template-rows: 25% 100px auto;\n\t\t\t}\n![](http://oczira72b.bkt.clouddn.com/grid-flex-28.png)\n\n\t\t.box {\n\t\t    grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];\n\t\t    grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];\n\t\t}\n![](http://oczira72b.bkt.clouddn.com/grid-flex-29.png)\n\n一根网格线可以有多个名字，例如在下面的例子中第二根线有两个名字：row1-end 和 row2-start，命名方式以空格来作为间隔。\n\n     .box{\n         grid-template-rows:[row1-start] 25% [row1-end row-start] 25% [row-end];\n         }\n         \n定义了容器的重复部分，你可以使用CSS的repeat()方法来生成多个相同值：\n\t\t\n\t\t.box {\n\t\t    grid-template-columns: repeat(3, 20px [col-start]) 5%;\n\t\t}\n\t\t\t\t\n\t\t.box {\n\t\t    grid-template-columns: 20px [col-start] 20px [col-start] 20px [col-start] 5%;\n\t\t}\n\t\t\nfr是一个特殊的单位，它可以类似于设定flex-grow时，给网格容器中的自由空间设置为一个份数，举个例子，下面的例子将把网格容器的每个子项设置为三分之一\n\n\t\t.box {\n    \t\tgrid-template-columns: 1fr 1fr 1fr;\n\t\t}\n\t\t\n也是类似于flex-grow，自由空间是在固定子项确定后开始计算的（这里就如同flex-basis提前给予宽高那样），在下面的例子中自由空间是fr单位的总和但不包括50px：\n\t\t\t.box {\n\t\t\t    grid-template-columns: 1fr 50px 1fr 1fr;\n\t\t\t}\n\t\t\t\n3. **grid-template-areas**  \n   grid-template-areas可以配合gird-area定义一个显示的网格区域。  \n   grid-template-areas定义网格区域，然后使用grid-area调用声明好的网格区域名称来放置对应的网格项目  \n   \n         <section class=\"grid\">\n\t\t    <div class=\"title\">title</div>\n\t\t    <div class=\"nav\">nav</div>\n\t\t    <div class=\"main\">main</div>\n\t\t    <div class=\"aside\">aside</div>\n\t\t    <div class=\"footer\">footer</div>\n\t\t</section>  \n\t\t.grid {\n\t\t\t    display: grid;\n\t\t\t    grid-template-columns: 100px 100px 100px 100px 100px;\n\t\t\t    grid-template-rows: 100px 100px 100px 100px;\n\t\t\t    grid-template-areas: 'title title title title aside'\n\t\t\t                          'nav main main main aside'\n\t\t\t                          'nav main main main aside'\n\t\t\t                          'footer footer footer footer footer';\n\t\t\t    font-size: 30px;\n\t\t\t    text-align: center;\n\t\t\t}\n\t\t\t.title {\n\t\t\t    grid-area: title;\n\t\t\t    background-color: blue;\n\t\t\t}\n\t\t\t.nav {\n\t\t\t    grid-area: nav;\n\t\t\t    background-color: yellow;\n\t\t\t}\n\t\t\t.main {\n\t\t\t    grid-area: main;\n\t\t\t    background-color: gray;\n\t\t\t}\n\t\t\t.aside {\n\t\t\t    grid-area: aside;\n\t\t\t    background-color: green;\n\t\t\t}\n\t\t\t.footer {\n\t\t\t    grid-area: footer;\n\t\t\t    background-color: pink;\n\t\t\t}\n![](http://oczira72b.bkt.clouddn.com/grid-flex-30.jpg)   \n\n4. **grid-column-gap|grid-row-gap**  \n   grid-column-gap和grid-row-gap定义了网格之间的间距\n   \n\t\t   .box {\n\t\t    grid-template-columns: 100px 50px 100px;\n\t\t    grid-template-rows: 80px auto 80px;\n\t\t    grid-column-gap: 10px;\n\t\t    grid-row-gap: 15px;\n\t\t}\n![](http://oczira72b.bkt.clouddn.com/grid-flex-31.png) \n\n5.**justify-items**  \njustify-items定义了网格子项的内容和列轴对齐方式，即水平方向上的对齐方式  \n\n\t\t\t.box {\n\t\t\t    justify-items: start | end | center | stretch;\n\t\t\t}\nstart代表内容和网格区域的左边对齐  \nend代表内容和网格区域的右边对齐  \ncenter代表内容和网格区域的中间对齐  \nstretch为默认值，代表填充整个网格区域的宽度  \n\n6. **align-items**  \n  类似于justify-items，align-items定义了网格子项的内容和行轴对齐方式，即垂直方向上的对齐方式。\n  \n\t\t\t .box {\n\t\t\t    align-items: start | end | center | stretch;\n\t\t\t}\n\t\t\t  \nstart代表内容和网格区域的上边对齐  \nend代表内容和网格区域的下边对齐  \ncenter代表内容和网格区域的中间对齐  \nstretch为默认值，代表填充整个网格区域的高度  \n\n7. **justity-content|align-content**\n  justify-content属性定义了网格和网格容器列轴对齐方式  \n  \n  \t\t\t.box {\n\t\t\t    justify-content|align-content: start | end | center | stretch | space-around | space-between | space-evenly;\n\t\t\t}\nstart代表网格在网格容器(左|上）边对齐  \nend代表网格在网格容器(右|下)边对齐  \ncenter代表网格在网格容器中间对齐  \nstretch改变网格子项的容量让其填充整个网格容器宽度  \nspace-around代表在每个网格子项中间放置均等的空间，在始末两端只有一半大小  \nspace-between代表在每个网格子项中间放置均等的空间，在始末两端没有空间  \nspace-evenly代表在每个网格子项中间放置均等的空间，包括始末两端  \n\n8. **grid-auto-columns|grid-auto-rows**  \n   grid-auto-columns与grid-auto-rows可以指定隐式网格。\n   \t\t\n   \t\t<div class=\"grid\">\n\t\t    <div class=\"box1\">box1</div>\n\t\t    <div class=\"box2\">box2</div>\n\t\t    <div class=\"box3\">box3</div>\n\t\t    <div class=\"box4\">box4</div>\n\t\t</div>\n  \t\t\t.grid {\n\t\t\t    display: grid;\n\t\t\t    grid-template-columns: 200px;\n\t\t\t    grid-template-rows: 200px;\n\t\t\t    text-align: center;\n\t\t\t    font-size: 30px;\n\t\t\t}\n\t\t\t.box1 {\n\t\t\t    background-color: pink;\n\t\t\t    grid-column: 1;\n\t\t\t    grid-row: 1;\n\t\t\t}\n\t\t\t.box2 {\n\t\t\t    background-color: yellow;\n\t\t\t    grid-column: 2;\n\t\t\t    grid-row: 1;\n\t\t\t}\n\t\t\t.box3 {\n\t\t\t    background-color: gray;\n\t\t\t    grid-column: 1;\n\t\t\t    grid-column: 2;\n\t\t\t}\n\t\t\t.box4 {\n\t\t\t    background-color: blue;\n\t\t\t    grid-column: 2;\n\t\t\t    grid-row: 2;\n\t\t\t}\n\n![](http://oczira72b.bkt.clouddn.com/grid-flex-54.jpg)  \n通过grid-auto-columns与grid-auto-rows属性，创建一个隐式的2×2的网格  \n\n\t\t\t\tgrid-auto-columns: 300px;\n\t\t\t\tgrid-auto-rows: 300px;\n![](http://oczira72b.bkt.clouddn.com/grid-flex-55.jpg)  \n9. **grid-auto-flow**    \n   grid布局自身具有的自动布局算法会将网格子项自动放置起来，而grid-auto-flow属性控制自动布局算法如何工作\n \n\t   .box {\n\t    grid-auto-flow: row | column | row dense | column dense\n\t}\n\t\nrow为默认值，代表自动布局算法在每一行中依次填充，只有必要时才会添加新行。  \ncolumn代表自动布局算法在每一列中依次填充，只有必要时才会添加新行。  \ndense代表告诉自动布局算法如果更小的子项出现时尝试在网格中填补漏洞。  \n10 **grid**  \ngrid为以下属性的合并写法：grid-template-rows，grid-template-columns，grid-template-areas，grid-auto-rows，grid-auto-columns，grid-auto-flow。它也可以设置grid-column-gap和grid-row-gap。  \n\n\t.box {\n\t    grid: none | <grid-template-rows> / <grid-template-columns> | <grid-auto-flow> [<grid-auto-rows> [/ <grid-auto-columns>]];\n\t}\n","slug":"flex&grid","published":1,"date":"2018-11-22T14:45:53.235Z","updated":"2018-11-22T14:45:53.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjosppz0t0000ggjgaewxck5n","content":"<h1 id=\"Flex\"><a href=\"#Flex\" class=\"headerlink\" title=\"Flex\"></a>Flex</h1><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。</p>\n<h2 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h2><ul>\n<li><strong>容器的声明</strong><br>Flex是Flexible Box的缩写，意为”弹性布局”<br>任何容器，我们均可以将它指定为flex布局，行内元素也可以使用Flex布局，Webkit内核的浏览器，必须加上-webkit前缀<br>设为Flex布局以后，子元素的float、clear和vertical-align属性将失效</li>\n</ul>\n<pre><code>  .box{\n    display:flex;\n    }\n\n\n  .box{  \n  display:inline-flex;\n  }\n\n  .box{\n  display:-webkit-flex;\n  display:flex;\n}\n</code></pre><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p> <img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-2.png\" alt=\"\"><br> 采用flex布局的元素，称为flex容器（flex container）。它的所有子元素自动成为容器成员，称为flex项目（flex item）<br> 容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。 项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size</p>\n<h2 id=\"容器的属性\"><a href=\"#容器的属性\" class=\"headerlink\" title=\"容器的属性\"></a>容器的属性</h2><ol>\n<li><p><strong>flex-direction</strong><br>该属性决定主轴的方向</p>\n<pre><code>     .box {\n  flex-direction: row | row-reverse | column | column-reverse;\n}\n</code></pre><p><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-5.jpg\" alt=\"\"></p>\n</li>\n<li><p><strong>flex-wrap</strong><br>如果一条轴线排不下，如何换行  </p>\n<pre><code>.box{\n     flex-wrap: nowrap | wrap | wrap-reverse;\n   }\n</code></pre><p> nowrap为默认值，代表不换行。<br> wrap代表换行，但默认为第一行在上方。<br> wrap-reverse代表换行，但默认为第一行在下方。     </p>\n</li>\n<li><strong>flex-flow</strong><br>flex-flow属性是<strong>flex-direction</strong>属性和<strong>flex-wrap</strong>属性的简写形式，默认值为<strong>row nowrap</strong></li>\n</ol>\n<pre><code> .box {\n  flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;\n}\n</code></pre><ol start=\"4\">\n<li><p><strong>justify-content</strong><br>justify-content属性定义了项目在主轴上的对齐方式。</p>\n<pre><code>   .box {\n  justify-content: flex-start | flex-end | center | space-between | space-around;\n}\n</code></pre><p>flex-start为默认值，代表项目在主轴上向起始方向对齐<br>flex-end代表项目在主轴上向结束方向对齐<br>center代表项目在主轴上居中对齐<br>space-between代表项目在主轴上两端对齐，但第一个项目在主轴的起始位置，最后一个项目在主轴的结束位置<br>space-around代表项目在主轴上等分间距，但第一个项目与最后一个项目距离主轴的两端保持一定的距离，这个距离为项目之间间距的1/2<br><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-7.jpg\" alt=\"\"></p>\n</li>\n<li><p><strong>align-items</strong><br>align-items属性定义项目在交叉轴上如何对齐。</p>\n<pre><code>.box {\n  align-items: flex-start | flex-end | center | baseline | stretch;\n}\n</code></pre><p><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-8.jpg\" alt=\"\"><br>flex-start代表项目在交叉轴上向起始方向对齐。<br>flex-end代表项目在交叉轴上向结束方向对齐。<br>center代表项目在交叉轴上居中对齐。<br>baseline代表项目在交叉轴上向项目的第一行文字的基线对齐。<br>stretch代表项目在交叉轴上拉伸对齐。 </p>\n</li>\n<li><p><strong>align-content</strong><br>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>\n<pre><code>.box {\n  align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n}\n</code></pre><p>flex-start：与交叉轴的起点对齐。<br>flex-end：与交叉轴的终点对齐。<br>center：与交叉轴的中点对齐。<br>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。<br>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。<br>stretch（默认值）：轴线占满整个交叉轴。<br><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-9.jpg\" alt=\"\">  </p>\n</li>\n</ol>\n<h2 id=\"项目的属性\"><a href=\"#项目的属性\" class=\"headerlink\" title=\"项目的属性\"></a>项目的属性</h2><ol>\n<li><p><strong>order</strong><br>order属性定义项目的排列顺序，数值越小，排列越靠前，默认为0  </p>\n<pre><code>  .item {\n  order: &lt;integer&gt;;\n}\n</code></pre><p> <img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-10.jpg\" alt=\"\"> </p>\n</li>\n</ol>\n<p>2.<strong>flex-grow</strong><br>  flex-grow定义了项目的放大比例。如果所有伸缩项目的flex-grow设置了1，那么每个伸缩项目将设置为一个大小相等的剩余空间。如果你给其中一个伸缩项目设置了flex-grow值为2，那么这个伸缩项目所占的剩余空间是其他伸缩项目所占剩余空间的两倍。</p>\n<p>ps：负值对该属性无效。  </p>\n<pre><code>.item {\n    flex-grow: &lt;number&gt;; /* default 0 */\n}\n</code></pre><p> <img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-11.jpg\" alt=\"\"></p>\n<ol start=\"3\">\n<li><strong>flex-shrink</strong><br>类似于flex-grow，flex-shrink定义了项目的缩小比例。其默认值为1  </li>\n</ol>\n<p>如果所有项目的flex-shrink都为1，当空间不足时，都将等比例缩小  </p>\n<p>如果所有项目都为1，但其中一个项目的flex-shrink为0，即代表空间不足时，该项目缩小0倍，即为不缩小  </p>\n<p>ps：负值对该属性不起作用。<br> <img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-12.jpg\" alt=\"\"></p>\n<ol start=\"4\">\n<li><p><strong>flex-basis</strong><br>flex-basis定义了在分配多余空间之前，项目占据的主轴空间。览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p>\n<pre><code>  .item {\n    flex-basis: &lt;length&gt; | auto; /* default auto */\n}\n</code></pre></li>\n</ol>\n<p>利用flex-basis，我们可以很容易实现页面布局中的常见问题：两栏/三栏布局</p>\n<pre><code>    &lt;div class=&quot;box&quot;&gt;\n    &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;\n    &lt;div class=&quot;main&quot;&gt;main&lt;/div&gt;\n&lt;/div&gt;\n\n\n        .box {\n    display: flex;\n    height: 200px;\n        }\n        .left {\n            background-color: yellow;\n            flex-basis: 200px;\n    /* flex-basis定义该项目在分配主轴空间之前提前获得200px的空间 */\n            flex-grow: 0;\n            /* flex-grow定义该项目不分配剩余空间 */\n        }\n        .main {\n            background-color: green;\n            flex-grow: 1;\n            /* flex-grow定义main占满剩余空间 */\n        }\n</code></pre><p><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-13.jpg\" alt=\"\"></p>\n<p>5.<strong>flex</strong><br>flex是flex-grow、flex-shrink和flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p>\n<pre><code>.item {\n    flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]\n}\n</code></pre><ol start=\"6\">\n<li><strong>align-self</strong><br>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。    </li>\n</ol>\n<h1 id=\"Grid\"><a href=\"#Grid\" class=\"headerlink\" title=\"Grid\"></a>Grid</h1><h2 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>grid 布局。是一个基于网格的二维布局系统。grid是第一个专门为了解决那些我们一直使用 hack 手段而导致的页面布局问题而创建的CSS模块。<br>一个grid容器的内容：  </p>\n<ul>\n<li>可以将应用程序分割成不同的空间  </li>\n<li>可以定义子项的大小、位置以及层级。</li>\n<li>与表格类似的是：可以让Web设计师根据元素按列或行对齐排列。</li>\n<li>可以定位自己的位置，这样他们可以重叠和类似元素定位。</li>\n<li>可以通过结合CSS的媒体查询属性，根据不同的设备和可用空间调整元素的显示风格与定位，而不需要去改变文档结构的本质内容  </li>\n</ul>\n<p><strong>浏览器支持</strong><br><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-25.jpg\" alt=\"\"></p>\n<p>采用grid布局的元素，称为grid容器（grid container）。它的所有子元素自动成为容器成员，称为grid项目（grid item）。</p>\n<p>分隔的线组成了网格的结构。它们可以是垂直的（“列网格线”）或者水平的（“行网格线”），也可以在行或列的任一边。下面的例子中黄色的线是一个列网格线的例子。<br><strong>网格线</strong><br>每条网格线具有默认的编号，从左到右和从上到下分别为1,2,3……<br><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-3.jpg\" alt=\"\"><br><strong>网格单元</strong><br>网格单元是指两根毗邻的行网格线和列网格线中间的位置，它是一个单独的网格“单元”，如图所示，网格单元是指第 1 和 2 根行网格线和第 2 和 3 根列网格线中间的位置。<br><img src=\"http://oczira72b.bkt.clouddn.com/flex-grid-4.png\" alt=\"\"><br><strong>网格轨迹</strong><br>网格轨迹是指两根毗邻线中间的位置，可以认为是网格的行或者列<br><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-26.png\" alt=\"\"><br><strong>网格区域</strong><br>网格区域是指 4 根网格线包围的空间，一个网格空间可能由任意数量的网格单元构成<br><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-27.png\" alt=\"\">  </p>\n<h2 id=\"容器的属性-1\"><a href=\"#容器的属性-1\" class=\"headerlink\" title=\"容器的属性\"></a>容器的属性</h2><ol>\n<li><p><strong>disaplay</strong><br>display属性定义了一个网格容器，容器是展现为行内或块状由所给定的值而决定，此时，他的所有子元素进入grid文档流，称为grid项目 </p>\n<pre><code>.box {\n    display: grid | inline-grid | subgrid;\n}\n</code></pre><p>grid定义了一个网格容器，它以块级元素的形式显示<br>inline-grid定义了一个网格容器，它以内联元素的形式显示<br>subgrid定义了一个网格容器，这个网格容器是其父级网格容器的一个子项。它的行和列的大小从父级网格容器中获取  </p>\n</li>\n<li><p><strong>grid-template-columns | grid-template-rows</strong><br>grid-template-rows和grid-template-columns定义了一个网格的列数、行数以及网格的大小。</p>\n<pre><code>.box {\n        grid-template-columns: &lt;track-size&gt; ... | &lt;line-name&gt; &lt;track-size&gt; ...;\n        grid-template-rows: &lt;track-size&gt; ... | &lt;line-name&gt; &lt;track-size&gt; ...;\n    }\n</code></pre><p>定义网格单元的宽高，其单位可以是一个长度(如px、em、rem、vw、vh)或百分比，也可以是网格中自由空间的份数(单位为fr)<br>定义网格线的名称，它不是必须值。可以一个你选择的任意名字，当没有显示设定时，它的名字以数字表示。  </p>\n<pre><code>.box {\n    grid-template-columns: 40px 50px auto 50px 40px;\n    grid-template-rows: 25% 100px auto;\n}\n</code></pre><p><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-28.png\" alt=\"\"></p>\n<pre><code>.box {\n    grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];\n    grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];\n}\n</code></pre><p><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-29.png\" alt=\"\"></p>\n</li>\n</ol>\n<p>一根网格线可以有多个名字，例如在下面的例子中第二根线有两个名字：row1-end 和 row2-start，命名方式以空格来作为间隔。</p>\n<pre><code>.box{\n    grid-template-rows:[row1-start] 25% [row1-end row-start] 25% [row-end];\n    }\n</code></pre><p>定义了容器的重复部分，你可以使用CSS的repeat()方法来生成多个相同值：</p>\n<pre><code>.box {\n    grid-template-columns: repeat(3, 20px [col-start]) 5%;\n}\n\n.box {\n    grid-template-columns: 20px [col-start] 20px [col-start] 20px [col-start] 5%;\n}\n</code></pre><p>fr是一个特殊的单位，它可以类似于设定flex-grow时，给网格容器中的自由空间设置为一个份数，举个例子，下面的例子将把网格容器的每个子项设置为三分之一</p>\n<pre><code>.box {\n    grid-template-columns: 1fr 1fr 1fr;\n}\n</code></pre><p>也是类似于flex-grow，自由空间是在固定子项确定后开始计算的（这里就如同flex-basis提前给予宽高那样），在下面的例子中自由空间是fr单位的总和但不包括50px：<br>            .box {<br>                grid-template-columns: 1fr 50px 1fr 1fr;<br>            }</p>\n<ol start=\"3\">\n<li><p><strong>grid-template-areas</strong><br>grid-template-areas可以配合gird-area定义一个显示的网格区域。<br>grid-template-areas定义网格区域，然后使用grid-area调用声明好的网格区域名称来放置对应的网格项目  </p>\n<pre><code> &lt;section class=&quot;grid&quot;&gt;\n    &lt;div class=&quot;title&quot;&gt;title&lt;/div&gt;\n    &lt;div class=&quot;nav&quot;&gt;nav&lt;/div&gt;\n    &lt;div class=&quot;main&quot;&gt;main&lt;/div&gt;\n    &lt;div class=&quot;aside&quot;&gt;aside&lt;/div&gt;\n    &lt;div class=&quot;footer&quot;&gt;footer&lt;/div&gt;\n&lt;/section&gt;  \n.grid {\n        display: grid;\n        grid-template-columns: 100px 100px 100px 100px 100px;\n        grid-template-rows: 100px 100px 100px 100px;\n        grid-template-areas: &apos;title title title title aside&apos;\n                              &apos;nav main main main aside&apos;\n                              &apos;nav main main main aside&apos;\n                              &apos;footer footer footer footer footer&apos;;\n        font-size: 30px;\n        text-align: center;\n    }\n    .title {\n        grid-area: title;\n        background-color: blue;\n    }\n    .nav {\n        grid-area: nav;\n        background-color: yellow;\n    }\n    .main {\n        grid-area: main;\n        background-color: gray;\n    }\n    .aside {\n        grid-area: aside;\n        background-color: green;\n    }\n    .footer {\n        grid-area: footer;\n        background-color: pink;\n    }\n</code></pre><p><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-30.jpg\" alt=\"\">   </p>\n</li>\n<li><p><strong>grid-column-gap|grid-row-gap</strong><br>grid-column-gap和grid-row-gap定义了网格之间的间距</p>\n<pre><code>   .box {\n    grid-template-columns: 100px 50px 100px;\n    grid-template-rows: 80px auto 80px;\n    grid-column-gap: 10px;\n    grid-row-gap: 15px;\n}\n</code></pre><p><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-31.png\" alt=\"\"> </p>\n</li>\n</ol>\n<p>5.<strong>justify-items</strong><br>justify-items定义了网格子项的内容和列轴对齐方式，即水平方向上的对齐方式  </p>\n<pre><code>.box {\n    justify-items: start | end | center | stretch;\n}\n</code></pre><p>start代表内容和网格区域的左边对齐<br>end代表内容和网格区域的右边对齐<br>center代表内容和网格区域的中间对齐<br>stretch为默认值，代表填充整个网格区域的宽度  </p>\n<ol start=\"6\">\n<li><p><strong>align-items</strong><br>类似于justify-items，align-items定义了网格子项的内容和行轴对齐方式，即垂直方向上的对齐方式。</p>\n<pre><code> .box {\n    align-items: start | end | center | stretch;\n}\n</code></pre></li>\n</ol>\n<p>start代表内容和网格区域的上边对齐<br>end代表内容和网格区域的下边对齐<br>center代表内容和网格区域的中间对齐<br>stretch为默认值，代表填充整个网格区域的高度  </p>\n<ol start=\"7\">\n<li><p><strong>justity-content|align-content</strong><br>justify-content属性定义了网格和网格容器列轴对齐方式  </p>\n<pre><code>  .box {\n    justify-content|align-content: start | end | center | stretch | space-around | space-between | space-evenly;\n}\n</code></pre><p>start代表网格在网格容器(左|上）边对齐<br>end代表网格在网格容器(右|下)边对齐<br>center代表网格在网格容器中间对齐<br>stretch改变网格子项的容量让其填充整个网格容器宽度<br>space-around代表在每个网格子项中间放置均等的空间，在始末两端只有一半大小<br>space-between代表在每个网格子项中间放置均等的空间，在始末两端没有空间<br>space-evenly代表在每个网格子项中间放置均等的空间，包括始末两端  </p>\n</li>\n<li><p><strong>grid-auto-columns|grid-auto-rows</strong><br>grid-auto-columns与grid-auto-rows可以指定隐式网格。</p>\n<pre><code>   &lt;div class=&quot;grid&quot;&gt;\n    &lt;div class=&quot;box1&quot;&gt;box1&lt;/div&gt;\n    &lt;div class=&quot;box2&quot;&gt;box2&lt;/div&gt;\n    &lt;div class=&quot;box3&quot;&gt;box3&lt;/div&gt;\n    &lt;div class=&quot;box4&quot;&gt;box4&lt;/div&gt;\n&lt;/div&gt;\n      .grid {\n        display: grid;\n        grid-template-columns: 200px;\n        grid-template-rows: 200px;\n        text-align: center;\n        font-size: 30px;\n    }\n    .box1 {\n        background-color: pink;\n        grid-column: 1;\n        grid-row: 1;\n    }\n    .box2 {\n        background-color: yellow;\n        grid-column: 2;\n        grid-row: 1;\n    }\n    .box3 {\n        background-color: gray;\n        grid-column: 1;\n        grid-column: 2;\n    }\n    .box4 {\n        background-color: blue;\n        grid-column: 2;\n        grid-row: 2;\n    }\n</code></pre></li>\n</ol>\n<p><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-54.jpg\" alt=\"\"><br>通过grid-auto-columns与grid-auto-rows属性，创建一个隐式的2×2的网格  </p>\n<pre><code>grid-auto-columns: 300px;\ngrid-auto-rows: 300px;\n</code></pre><p><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-55.jpg\" alt=\"\">  </p>\n<ol start=\"9\">\n<li><p><strong>grid-auto-flow</strong><br>grid布局自身具有的自动布局算法会将网格子项自动放置起来，而grid-auto-flow属性控制自动布局算法如何工作</p>\n<pre><code>.box {\n grid-auto-flow: row | column | row dense | column dense\n</code></pre><p> }</p>\n</li>\n</ol>\n<p>row为默认值，代表自动布局算法在每一行中依次填充，只有必要时才会添加新行。<br>column代表自动布局算法在每一列中依次填充，只有必要时才会添加新行。<br>dense代表告诉自动布局算法如果更小的子项出现时尝试在网格中填补漏洞。<br>10 <strong>grid</strong><br>grid为以下属性的合并写法：grid-template-rows，grid-template-columns，grid-template-areas，grid-auto-rows，grid-auto-columns，grid-auto-flow。它也可以设置grid-column-gap和grid-row-gap。  </p>\n<pre><code>.box {\n    grid: none | &lt;grid-template-rows&gt; / &lt;grid-template-columns&gt; | &lt;grid-auto-flow&gt; [&lt;grid-auto-rows&gt; [/ &lt;grid-auto-columns&gt;]];\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Flex\"><a href=\"#Flex\" class=\"headerlink\" title=\"Flex\"></a>Flex</h1><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。</p>\n<h2 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h2><ul>\n<li><strong>容器的声明</strong><br>Flex是Flexible Box的缩写，意为”弹性布局”<br>任何容器，我们均可以将它指定为flex布局，行内元素也可以使用Flex布局，Webkit内核的浏览器，必须加上-webkit前缀<br>设为Flex布局以后，子元素的float、clear和vertical-align属性将失效</li>\n</ul>\n<pre><code>  .box{\n    display:flex;\n    }\n\n\n  .box{  \n  display:inline-flex;\n  }\n\n  .box{\n  display:-webkit-flex;\n  display:flex;\n}\n</code></pre><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p> <img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-2.png\" alt=\"\"><br> 采用flex布局的元素，称为flex容器（flex container）。它的所有子元素自动成为容器成员，称为flex项目（flex item）<br> 容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。 项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size</p>\n<h2 id=\"容器的属性\"><a href=\"#容器的属性\" class=\"headerlink\" title=\"容器的属性\"></a>容器的属性</h2><ol>\n<li><p><strong>flex-direction</strong><br>该属性决定主轴的方向</p>\n<pre><code>     .box {\n  flex-direction: row | row-reverse | column | column-reverse;\n}\n</code></pre><p><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-5.jpg\" alt=\"\"></p>\n</li>\n<li><p><strong>flex-wrap</strong><br>如果一条轴线排不下，如何换行  </p>\n<pre><code>.box{\n     flex-wrap: nowrap | wrap | wrap-reverse;\n   }\n</code></pre><p> nowrap为默认值，代表不换行。<br> wrap代表换行，但默认为第一行在上方。<br> wrap-reverse代表换行，但默认为第一行在下方。     </p>\n</li>\n<li><strong>flex-flow</strong><br>flex-flow属性是<strong>flex-direction</strong>属性和<strong>flex-wrap</strong>属性的简写形式，默认值为<strong>row nowrap</strong></li>\n</ol>\n<pre><code> .box {\n  flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;\n}\n</code></pre><ol start=\"4\">\n<li><p><strong>justify-content</strong><br>justify-content属性定义了项目在主轴上的对齐方式。</p>\n<pre><code>   .box {\n  justify-content: flex-start | flex-end | center | space-between | space-around;\n}\n</code></pre><p>flex-start为默认值，代表项目在主轴上向起始方向对齐<br>flex-end代表项目在主轴上向结束方向对齐<br>center代表项目在主轴上居中对齐<br>space-between代表项目在主轴上两端对齐，但第一个项目在主轴的起始位置，最后一个项目在主轴的结束位置<br>space-around代表项目在主轴上等分间距，但第一个项目与最后一个项目距离主轴的两端保持一定的距离，这个距离为项目之间间距的1/2<br><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-7.jpg\" alt=\"\"></p>\n</li>\n<li><p><strong>align-items</strong><br>align-items属性定义项目在交叉轴上如何对齐。</p>\n<pre><code>.box {\n  align-items: flex-start | flex-end | center | baseline | stretch;\n}\n</code></pre><p><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-8.jpg\" alt=\"\"><br>flex-start代表项目在交叉轴上向起始方向对齐。<br>flex-end代表项目在交叉轴上向结束方向对齐。<br>center代表项目在交叉轴上居中对齐。<br>baseline代表项目在交叉轴上向项目的第一行文字的基线对齐。<br>stretch代表项目在交叉轴上拉伸对齐。 </p>\n</li>\n<li><p><strong>align-content</strong><br>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>\n<pre><code>.box {\n  align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n}\n</code></pre><p>flex-start：与交叉轴的起点对齐。<br>flex-end：与交叉轴的终点对齐。<br>center：与交叉轴的中点对齐。<br>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。<br>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。<br>stretch（默认值）：轴线占满整个交叉轴。<br><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-9.jpg\" alt=\"\">  </p>\n</li>\n</ol>\n<h2 id=\"项目的属性\"><a href=\"#项目的属性\" class=\"headerlink\" title=\"项目的属性\"></a>项目的属性</h2><ol>\n<li><p><strong>order</strong><br>order属性定义项目的排列顺序，数值越小，排列越靠前，默认为0  </p>\n<pre><code>  .item {\n  order: &lt;integer&gt;;\n}\n</code></pre><p> <img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-10.jpg\" alt=\"\"> </p>\n</li>\n</ol>\n<p>2.<strong>flex-grow</strong><br>  flex-grow定义了项目的放大比例。如果所有伸缩项目的flex-grow设置了1，那么每个伸缩项目将设置为一个大小相等的剩余空间。如果你给其中一个伸缩项目设置了flex-grow值为2，那么这个伸缩项目所占的剩余空间是其他伸缩项目所占剩余空间的两倍。</p>\n<p>ps：负值对该属性无效。  </p>\n<pre><code>.item {\n    flex-grow: &lt;number&gt;; /* default 0 */\n}\n</code></pre><p> <img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-11.jpg\" alt=\"\"></p>\n<ol start=\"3\">\n<li><strong>flex-shrink</strong><br>类似于flex-grow，flex-shrink定义了项目的缩小比例。其默认值为1  </li>\n</ol>\n<p>如果所有项目的flex-shrink都为1，当空间不足时，都将等比例缩小  </p>\n<p>如果所有项目都为1，但其中一个项目的flex-shrink为0，即代表空间不足时，该项目缩小0倍，即为不缩小  </p>\n<p>ps：负值对该属性不起作用。<br> <img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-12.jpg\" alt=\"\"></p>\n<ol start=\"4\">\n<li><p><strong>flex-basis</strong><br>flex-basis定义了在分配多余空间之前，项目占据的主轴空间。览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p>\n<pre><code>  .item {\n    flex-basis: &lt;length&gt; | auto; /* default auto */\n}\n</code></pre></li>\n</ol>\n<p>利用flex-basis，我们可以很容易实现页面布局中的常见问题：两栏/三栏布局</p>\n<pre><code>    &lt;div class=&quot;box&quot;&gt;\n    &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;\n    &lt;div class=&quot;main&quot;&gt;main&lt;/div&gt;\n&lt;/div&gt;\n\n\n        .box {\n    display: flex;\n    height: 200px;\n        }\n        .left {\n            background-color: yellow;\n            flex-basis: 200px;\n    /* flex-basis定义该项目在分配主轴空间之前提前获得200px的空间 */\n            flex-grow: 0;\n            /* flex-grow定义该项目不分配剩余空间 */\n        }\n        .main {\n            background-color: green;\n            flex-grow: 1;\n            /* flex-grow定义main占满剩余空间 */\n        }\n</code></pre><p><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-13.jpg\" alt=\"\"></p>\n<p>5.<strong>flex</strong><br>flex是flex-grow、flex-shrink和flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p>\n<pre><code>.item {\n    flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]\n}\n</code></pre><ol start=\"6\">\n<li><strong>align-self</strong><br>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。    </li>\n</ol>\n<h1 id=\"Grid\"><a href=\"#Grid\" class=\"headerlink\" title=\"Grid\"></a>Grid</h1><h2 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>grid 布局。是一个基于网格的二维布局系统。grid是第一个专门为了解决那些我们一直使用 hack 手段而导致的页面布局问题而创建的CSS模块。<br>一个grid容器的内容：  </p>\n<ul>\n<li>可以将应用程序分割成不同的空间  </li>\n<li>可以定义子项的大小、位置以及层级。</li>\n<li>与表格类似的是：可以让Web设计师根据元素按列或行对齐排列。</li>\n<li>可以定位自己的位置，这样他们可以重叠和类似元素定位。</li>\n<li>可以通过结合CSS的媒体查询属性，根据不同的设备和可用空间调整元素的显示风格与定位，而不需要去改变文档结构的本质内容  </li>\n</ul>\n<p><strong>浏览器支持</strong><br><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-25.jpg\" alt=\"\"></p>\n<p>采用grid布局的元素，称为grid容器（grid container）。它的所有子元素自动成为容器成员，称为grid项目（grid item）。</p>\n<p>分隔的线组成了网格的结构。它们可以是垂直的（“列网格线”）或者水平的（“行网格线”），也可以在行或列的任一边。下面的例子中黄色的线是一个列网格线的例子。<br><strong>网格线</strong><br>每条网格线具有默认的编号，从左到右和从上到下分别为1,2,3……<br><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-3.jpg\" alt=\"\"><br><strong>网格单元</strong><br>网格单元是指两根毗邻的行网格线和列网格线中间的位置，它是一个单独的网格“单元”，如图所示，网格单元是指第 1 和 2 根行网格线和第 2 和 3 根列网格线中间的位置。<br><img src=\"http://oczira72b.bkt.clouddn.com/flex-grid-4.png\" alt=\"\"><br><strong>网格轨迹</strong><br>网格轨迹是指两根毗邻线中间的位置，可以认为是网格的行或者列<br><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-26.png\" alt=\"\"><br><strong>网格区域</strong><br>网格区域是指 4 根网格线包围的空间，一个网格空间可能由任意数量的网格单元构成<br><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-27.png\" alt=\"\">  </p>\n<h2 id=\"容器的属性-1\"><a href=\"#容器的属性-1\" class=\"headerlink\" title=\"容器的属性\"></a>容器的属性</h2><ol>\n<li><p><strong>disaplay</strong><br>display属性定义了一个网格容器，容器是展现为行内或块状由所给定的值而决定，此时，他的所有子元素进入grid文档流，称为grid项目 </p>\n<pre><code>.box {\n    display: grid | inline-grid | subgrid;\n}\n</code></pre><p>grid定义了一个网格容器，它以块级元素的形式显示<br>inline-grid定义了一个网格容器，它以内联元素的形式显示<br>subgrid定义了一个网格容器，这个网格容器是其父级网格容器的一个子项。它的行和列的大小从父级网格容器中获取  </p>\n</li>\n<li><p><strong>grid-template-columns | grid-template-rows</strong><br>grid-template-rows和grid-template-columns定义了一个网格的列数、行数以及网格的大小。</p>\n<pre><code>.box {\n        grid-template-columns: &lt;track-size&gt; ... | &lt;line-name&gt; &lt;track-size&gt; ...;\n        grid-template-rows: &lt;track-size&gt; ... | &lt;line-name&gt; &lt;track-size&gt; ...;\n    }\n</code></pre><p>定义网格单元的宽高，其单位可以是一个长度(如px、em、rem、vw、vh)或百分比，也可以是网格中自由空间的份数(单位为fr)<br>定义网格线的名称，它不是必须值。可以一个你选择的任意名字，当没有显示设定时，它的名字以数字表示。  </p>\n<pre><code>.box {\n    grid-template-columns: 40px 50px auto 50px 40px;\n    grid-template-rows: 25% 100px auto;\n}\n</code></pre><p><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-28.png\" alt=\"\"></p>\n<pre><code>.box {\n    grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];\n    grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];\n}\n</code></pre><p><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-29.png\" alt=\"\"></p>\n</li>\n</ol>\n<p>一根网格线可以有多个名字，例如在下面的例子中第二根线有两个名字：row1-end 和 row2-start，命名方式以空格来作为间隔。</p>\n<pre><code>.box{\n    grid-template-rows:[row1-start] 25% [row1-end row-start] 25% [row-end];\n    }\n</code></pre><p>定义了容器的重复部分，你可以使用CSS的repeat()方法来生成多个相同值：</p>\n<pre><code>.box {\n    grid-template-columns: repeat(3, 20px [col-start]) 5%;\n}\n\n.box {\n    grid-template-columns: 20px [col-start] 20px [col-start] 20px [col-start] 5%;\n}\n</code></pre><p>fr是一个特殊的单位，它可以类似于设定flex-grow时，给网格容器中的自由空间设置为一个份数，举个例子，下面的例子将把网格容器的每个子项设置为三分之一</p>\n<pre><code>.box {\n    grid-template-columns: 1fr 1fr 1fr;\n}\n</code></pre><p>也是类似于flex-grow，自由空间是在固定子项确定后开始计算的（这里就如同flex-basis提前给予宽高那样），在下面的例子中自由空间是fr单位的总和但不包括50px：<br>            .box {<br>                grid-template-columns: 1fr 50px 1fr 1fr;<br>            }</p>\n<ol start=\"3\">\n<li><p><strong>grid-template-areas</strong><br>grid-template-areas可以配合gird-area定义一个显示的网格区域。<br>grid-template-areas定义网格区域，然后使用grid-area调用声明好的网格区域名称来放置对应的网格项目  </p>\n<pre><code> &lt;section class=&quot;grid&quot;&gt;\n    &lt;div class=&quot;title&quot;&gt;title&lt;/div&gt;\n    &lt;div class=&quot;nav&quot;&gt;nav&lt;/div&gt;\n    &lt;div class=&quot;main&quot;&gt;main&lt;/div&gt;\n    &lt;div class=&quot;aside&quot;&gt;aside&lt;/div&gt;\n    &lt;div class=&quot;footer&quot;&gt;footer&lt;/div&gt;\n&lt;/section&gt;  \n.grid {\n        display: grid;\n        grid-template-columns: 100px 100px 100px 100px 100px;\n        grid-template-rows: 100px 100px 100px 100px;\n        grid-template-areas: &apos;title title title title aside&apos;\n                              &apos;nav main main main aside&apos;\n                              &apos;nav main main main aside&apos;\n                              &apos;footer footer footer footer footer&apos;;\n        font-size: 30px;\n        text-align: center;\n    }\n    .title {\n        grid-area: title;\n        background-color: blue;\n    }\n    .nav {\n        grid-area: nav;\n        background-color: yellow;\n    }\n    .main {\n        grid-area: main;\n        background-color: gray;\n    }\n    .aside {\n        grid-area: aside;\n        background-color: green;\n    }\n    .footer {\n        grid-area: footer;\n        background-color: pink;\n    }\n</code></pre><p><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-30.jpg\" alt=\"\">   </p>\n</li>\n<li><p><strong>grid-column-gap|grid-row-gap</strong><br>grid-column-gap和grid-row-gap定义了网格之间的间距</p>\n<pre><code>   .box {\n    grid-template-columns: 100px 50px 100px;\n    grid-template-rows: 80px auto 80px;\n    grid-column-gap: 10px;\n    grid-row-gap: 15px;\n}\n</code></pre><p><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-31.png\" alt=\"\"> </p>\n</li>\n</ol>\n<p>5.<strong>justify-items</strong><br>justify-items定义了网格子项的内容和列轴对齐方式，即水平方向上的对齐方式  </p>\n<pre><code>.box {\n    justify-items: start | end | center | stretch;\n}\n</code></pre><p>start代表内容和网格区域的左边对齐<br>end代表内容和网格区域的右边对齐<br>center代表内容和网格区域的中间对齐<br>stretch为默认值，代表填充整个网格区域的宽度  </p>\n<ol start=\"6\">\n<li><p><strong>align-items</strong><br>类似于justify-items，align-items定义了网格子项的内容和行轴对齐方式，即垂直方向上的对齐方式。</p>\n<pre><code> .box {\n    align-items: start | end | center | stretch;\n}\n</code></pre></li>\n</ol>\n<p>start代表内容和网格区域的上边对齐<br>end代表内容和网格区域的下边对齐<br>center代表内容和网格区域的中间对齐<br>stretch为默认值，代表填充整个网格区域的高度  </p>\n<ol start=\"7\">\n<li><p><strong>justity-content|align-content</strong><br>justify-content属性定义了网格和网格容器列轴对齐方式  </p>\n<pre><code>  .box {\n    justify-content|align-content: start | end | center | stretch | space-around | space-between | space-evenly;\n}\n</code></pre><p>start代表网格在网格容器(左|上）边对齐<br>end代表网格在网格容器(右|下)边对齐<br>center代表网格在网格容器中间对齐<br>stretch改变网格子项的容量让其填充整个网格容器宽度<br>space-around代表在每个网格子项中间放置均等的空间，在始末两端只有一半大小<br>space-between代表在每个网格子项中间放置均等的空间，在始末两端没有空间<br>space-evenly代表在每个网格子项中间放置均等的空间，包括始末两端  </p>\n</li>\n<li><p><strong>grid-auto-columns|grid-auto-rows</strong><br>grid-auto-columns与grid-auto-rows可以指定隐式网格。</p>\n<pre><code>   &lt;div class=&quot;grid&quot;&gt;\n    &lt;div class=&quot;box1&quot;&gt;box1&lt;/div&gt;\n    &lt;div class=&quot;box2&quot;&gt;box2&lt;/div&gt;\n    &lt;div class=&quot;box3&quot;&gt;box3&lt;/div&gt;\n    &lt;div class=&quot;box4&quot;&gt;box4&lt;/div&gt;\n&lt;/div&gt;\n      .grid {\n        display: grid;\n        grid-template-columns: 200px;\n        grid-template-rows: 200px;\n        text-align: center;\n        font-size: 30px;\n    }\n    .box1 {\n        background-color: pink;\n        grid-column: 1;\n        grid-row: 1;\n    }\n    .box2 {\n        background-color: yellow;\n        grid-column: 2;\n        grid-row: 1;\n    }\n    .box3 {\n        background-color: gray;\n        grid-column: 1;\n        grid-column: 2;\n    }\n    .box4 {\n        background-color: blue;\n        grid-column: 2;\n        grid-row: 2;\n    }\n</code></pre></li>\n</ol>\n<p><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-54.jpg\" alt=\"\"><br>通过grid-auto-columns与grid-auto-rows属性，创建一个隐式的2×2的网格  </p>\n<pre><code>grid-auto-columns: 300px;\ngrid-auto-rows: 300px;\n</code></pre><p><img src=\"http://oczira72b.bkt.clouddn.com/grid-flex-55.jpg\" alt=\"\">  </p>\n<ol start=\"9\">\n<li><p><strong>grid-auto-flow</strong><br>grid布局自身具有的自动布局算法会将网格子项自动放置起来，而grid-auto-flow属性控制自动布局算法如何工作</p>\n<pre><code>.box {\n grid-auto-flow: row | column | row dense | column dense\n</code></pre><p> }</p>\n</li>\n</ol>\n<p>row为默认值，代表自动布局算法在每一行中依次填充，只有必要时才会添加新行。<br>column代表自动布局算法在每一列中依次填充，只有必要时才会添加新行。<br>dense代表告诉自动布局算法如果更小的子项出现时尝试在网格中填补漏洞。<br>10 <strong>grid</strong><br>grid为以下属性的合并写法：grid-template-rows，grid-template-columns，grid-template-areas，grid-auto-rows，grid-auto-columns，grid-auto-flow。它也可以设置grid-column-gap和grid-row-gap。  </p>\n<pre><code>.box {\n    grid: none | &lt;grid-template-rows&gt; / &lt;grid-template-columns&gt; | &lt;grid-auto-flow&gt; [&lt;grid-auto-rows&gt; [/ &lt;grid-auto-columns&gt;]];\n}\n</code></pre>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjosppz0t0000ggjgaewxck5n","tag_id":"cjospibx80002edjgwje2id81","_id":"cjosppz110001ggjgsb2jbusg"},{"post_id":"cjosppz0t0000ggjgaewxck5n","tag_id":"cjospibx90003edjgkux2ruoq","_id":"cjosppz110002ggjghqqcw9xr"},{"post_id":"cjosppz0t0000ggjgaewxck5n","tag_id":"cjospibxb0004edjg1a0om9bq","_id":"cjosppz110003ggjgcg6uwcgm"}],"Tag":[{"name":"前端开发","_id":"cjospibx30001edjgqgex1r1q"},{"name":"css","_id":"cjospibx80002edjgwje2id81"},{"name":"flex","_id":"cjospibx90003edjgkux2ruoq"},{"name":"grid","_id":"cjospibxb0004edjg1a0om9bq"}]}}